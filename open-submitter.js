// Generated by CoffeeScript 1.3.3
(function() {
  var accounts, articles, backlinksList, casper, colors, currentIndexerStep, currentService, currentStep, currentSubmission, errorMsg, fileAccounts, fileArticles, fileBacklinks, fs, getAccount, getArticle, i, imports, indexer, indexerDetails, numLoops, numPosts, page, randomAccount, service, services, skipService, spinner, spinnerLoop, submitArticle, system, _i, _ref;

  fs = require('fs');

  system = require('system');

  colors = require('colors');

  imports = require('./app/imports');

  page = require('webpage').create();

  casper = require('casper').create({
    pageSettings: {
      webSecurityEnabled: false
    },
    viewportSize: {
      width: 800,
      height: 600
    },
    timeout: 3600000,
    stepTimeout: 300000,
    waitTimeout: 60000,
    verbose: true,
    onError: function(self, msg) {
      console.log(('FATAL:' + msg).red);
      self.exit();
    },
    onTimeout: function(self, msg) {
      this.capture('./capture/timeout.png');
      console.log(('general timeout error: ' + msg).red);
    },
    onStepTimeout: function(self, msg) {
      this.capture('./capture/timeout.png');
      console.log(('step timeout error: step ' + msg).red);
    },
    onWaitTimeout: function(self, msg) {
      this.capture('./capture/timeout.png');
      console.log(('wait timeout error: ' + msg).red);
    }
  });

  casper.userAgent('Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 ' + '(KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36');

  fileAccounts = './accounts/' + casper.cli.get(0) + '.csv';

  fileArticles = './articles/' + casper.cli.get(1) + '.txt';

  fileBacklinks = './backlinks/' + casper.cli.get(2) + '.txt';

  numPosts = casper.cli.get(3);

  console.log('\n');

  console.log('---------------- Submission Details ----------------------'.cyan);

  console.log(('Accounts file: ' + fileAccounts).cyan);

  console.log(('Articles file: ' + fileArticles).cyan);

  console.log(('Backlinks saved to file: ' + fileBacklinks).cyan);

  console.log(('Number of Submissions: ' + numPosts).cyan);

  currentService = 0;

  currentStep = 0;

  submitArticle = {
    title: '',
    body: '',
    keywords: ''
  };

  services = imports.services('./settings/services.txt');

  indexerDetails = imports.indexers('./settings/indexers.txt');

  numLoops = 0;

  service = [];

  currentService = 0;

  for (i = _i = 0, _ref = services.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (services[i].status.toLowerCase() === 'ok') {
      service[currentService] = require('./services/' + services[i].name);
      numLoops += service[currentService].steps.length;
      ++currentService;
    }
  }

  numLoops *= numPosts;

  if (indexerDetails.status.toLowerCase() === 'ok') {
    indexer = require('./indexers/' + indexerDetails.name);
  }

  getAccount = function(accountType) {
    var randomAcc, tempAccArray, tempRandomAccount;
    tempRandomAccount = {
      username: '',
      password: '',
      site: ''
    };
    tempAccArray = accounts.filter(function(el) {
      return el.accountType === accountType;
    });
    if (tempAccArray.length > 0) {
      randomAcc = Math.floor(Math.random() * tempAccArray.length);
      tempRandomAccount.username = tempAccArray[randomAcc].loginID;
      tempRandomAccount.password = tempAccArray[randomAcc].password;
      tempRandomAccount.site = tempAccArray[randomAcc].siteName;
    } else {
      tempRandomAccount.username = 'no accounts';
    }
    return tempRandomAccount;
  };

  spinner = function(x) {
    var temp3, tempSpinner, tempStr, y;
    tempStr = '';
    tempSpinner = x.split(/\{([^}]+)\}/);
    y = 0;
    while (y < tempSpinner.length) {
      temp3 = tempSpinner[y].split("|");
      tempStr += temp3[Math.floor(temp3.length * Math.random())];
      ++y;
    }
    return tempStr;
  };

  spinnerLoop = function(x) {
    var tempArray, y;
    tempArray = [];
    y = 0;
    while (y < x.length) {
      tempArray[y] = spinner(x[y]);
      ++y;
    }
    return tempArray;
  };

  getArticle = function(microBlog, noHTML) {
    var a, floatPos, newArticle, randomFloat, randomImage, randomKeyword, randomLink, randomPos, temp, temp1, temp2, temp3, tempIndex, tempLink, tempRandom;
    a = Math.floor(articles.length * Math.random());
    newArticle = {
      title: '',
      body: '',
      keywords: [],
      links: [],
      images: []
    };
    console.log('Spinning title for article # ' + a + '...');
    newArticle.title = spinner(articles[a].title);
    console.log('Spinning keywords for article # ' + a + '...');
    newArticle.keywords = spinnerLoop(articles[a].keywords);
    console.log('Spinning links for article # ' + a + '...');
    newArticle.links = spinnerLoop(articles[a].links);
    console.log('Spinning images for article # ' + a + '...');
    newArticle.images = spinnerLoop(articles[a].images);
    console.log('Spinning body of article # ' + a + '...');
    if (microBlog) {
      temp = articles[a].description;
    } else {
      temp = articles[a].body;
    }
    newArticle.body = spinner(temp);
    if (noHTML) {
      newArticle.body = newArticle.body.replace('<br>', '\n');
    }
    console.log('Inserting random links in article # ' + a + '...');
    if (!noHTML) {
      tempIndex = 0;
      while (tempIndex < newArticle.keywords.length) {
        if (newArticle.keywords[tempIndex].trim().length === 0) {
          newArticle.keywords.splice(tempIndex, 1);
        }
        ++tempIndex;
      }
      if (newArticle.keywords.length === 0) {
        newArticle.keywords[0] = 'here';
      }
      if ((newArticle.body.indexOf("#links#")) === -1) {
        newArticle.body += ' #links#';
      }
      while ((newArticle.body.indexOf("#links#")) !== -1) {
        tempRandom = Math.floor(Math.random() * newArticle.links.length);
        randomLink = newArticle.links[tempRandom];
        tempRandom = Math.floor(Math.random() * newArticle.keywords.length);
        randomKeyword = newArticle.keywords[tempRandom];
        tempLink = ' <a href="' + randomLink.toString().trim() + '">' + randomKeyword.toString().trim() + '</a> ';
        newArticle.body = newArticle.body.replace('#links#', tempLink);
      }
    } else {
      newArticle.body = newArticle.body.replace('#links#', ' ');
      temp = Math.floor(Math.random() * newArticle.links.length);
      randomLink = newArticle.links[temp];
      newArticle.body += ' ' + randomLink;
    }
    if (!noHTML) {
      console.log('Inserting random image in article # ' + a + '...');
      temp = newArticle.body.length;
      floatPos = ['style="float:right"', 'style="float:left"'];
      randomFloat = Math.round(Math.random());
      randomPos = Math.ceil(Math.random() * temp);
      randomImage = Math.floor(Math.random() * newArticle.images.length);
      while (newArticle.body.charAt(randomPos - 1) !== ' ') {
        randomPos = Math.ceil(Math.random() * temp);
      }
      temp1 = newArticle.body.slice(0, randomPos);
      temp2 = '<img src="' + newArticle.images[randomImage] + '" ' + floatPos[randomFloat] + '>';
      temp3 = newArticle.body.slice(randomPos, temp);
      newArticle.body = temp1 + temp2 + temp3;
    }
    console.log(('Created article: ' + newArticle.title).magenta);
    return newArticle;
  };

  console.log('------------------- Import Files -------------------------');

  accounts = imports.accounts(fileAccounts);

  articles = imports.articles(fileArticles);

  currentStep = 0;

  randomAccount = {
    username: '',
    password: '',
    site: ''
  };

  submitArticle = {
    title: '',
    body: '',
    keywords: ''
  };

  backlinksList = '';

  skipService = function() {
    console.log('Skipping ' + service[currentService].name);
    ++currentService;
    return currentStep = 0;
  };

  errorMsg = function() {
    console.log('Failed step ' + currentStep);
    console.log('Check error.png file');
    return skipService();
  };

  casper.doStep = function(objStep, serviceName) {
    var str, submitURL, tempObj, tempURL;
    this.echo('Step: ' + currentStep);
    if (objStep.command === 'create') {
      this.echo('Creating article...');
      submitArticle = getArticle(objStep.micro, objStep.noHTML);
      randomAccount = getAccount(serviceName);
      str = '-------------- Submit to ' + serviceName + ' ----------------';
      console.log(str.yellow);
    } else if (objStep.command === 'open') {
      this.echo('Opening url ' + objStep.url + '...');
      this.open(objStep.url).then(function() {
        this.capture('./capture/capture' + currentStep + '.png');
        if (objStep.confirm) {
          return this.waitForSelector(objStep.confirm, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          return this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      });
    } else if (objStep.command === 'open-site') {
      tempURL = objStep.begin + randomAccount.site + objStep.end;
      this.echo('Opening url ' + tempURL + '...');
      this.open(tempURL).then(function() {
        this.capture('./capture/capture' + currentStep + '.png');
        if (objStep.confirm) {
          return this.waitForSelector(objStep.confirm, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          return this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      });
    } else if (objStep.command === 'login') {
      if (randomAccount.username === 'no accounts') {
        this.echo('No ' + serviceName + ' accounts!');
        skipService();
      } else {
        this.echo('Logging in: ' + randomAccount.username + '...');
        tempObj = {
          formElem: objStep.form,
          nameElem: objStep.username,
          pwdElem: objStep.password,
          name: randomAccount.username,
          pwd: randomAccount.password,
          submit: objStep.submit
        };
        this.evaluate((function(s) {
          document.querySelector(s.nameElem).value = s.name;
          document.querySelector(s.pwdElem).value = s.pwd;
          if (s.submit) {
            document.querySelector(s.formElem).submit();
          }
        }), tempObj);
        this.capture('./capture/capture' + currentStep + '.png');
        this.echo('Waiting for login confirmation...');
        if (objStep.submit) {
          this.waitForSelector(objStep.confirm, function() {
            return this.echo('Login success.');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Login success.');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      }
    } else if (objStep.command === 'login-indexer') {
      if (indexer.username === 'no accounts') {
        this.echo('No indexer accounts!');
      } else {
        this.echo('Logging in: ' + indexerDetails.username + '...');
        tempObj = {
          formElem: objStep.form,
          nameElem: objStep.username,
          pwdElem: objStep.password,
          name: indexerDetails.username,
          pwd: indexerDetails.password,
          submit: objStep.submit
        };
        this.evaluate((function(s) {
          document.querySelector(s.nameElem).value = s.name;
          document.querySelector(s.pwdElem).value = s.pwd;
          if (s.submit) {
            document.querySelector(s.formElem).submit();
          }
        }), tempObj);
        this.capture('./capture/indexer0.png');
        this.echo('Waiting for login confirmation...');
        if (objStep.submit) {
          this.waitForSelector(objStep.confirm, function() {
            return this.echo('Login success.');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Login success.');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      }
    }
    if (objStep.command === 'click') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.click(tempObj);
        this.echo('Clicked on DOM selector');
        if (objStep.confirm) {
          this.waitForSelector(objStep.confirm, function() {
            return this.echo('Confirmed.');
          }, function() {
            this.echo('Confirm DOM selector not found', 'ERROR');
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
        if (objStep.confirmtxt) {
          this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Confirmed: ' + objStep.confirmtxt);
          }, function() {
            this.echo('Confirm text not found', 'ERROR');
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      } else {
        this.echo('DOM selector not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'wait') {
      this.echo('Waiting for ' + objStep.value + ' ms');
      this.wait(objStep.value, function() {
        this.echo('Finished wait time.');
      });
    }
    if (objStep.command === 'title') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.sendKeys(tempObj, submitArticle.title);
        this.echo('Entered title');
      } else {
        this.echo('Input field not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'backlinks') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.sendKeys(tempObj, backlinksList);
        this.echo('Entered backlinks list');
      } else {
        this.echo('Input field not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'body') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.sendKeys(tempObj, submitArticle.body);
        this.echo('Entered body');
      } else {
        this.echo('Input field not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'save-href') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        submitURL = this.getElementAttribute(tempObj, 'href');
        backlinksList += submitURL + '\n';
        console.log(('Submitted post to URL: ' + submitURL).cyan);
        try {
          fs.write(fileBacklinks, submitURL, 'a');
          fs.write(fileBacklinks, '\n', 'a');
        } catch (e) {
          this.echo(e);
        }
        return this.echo('Saved backlink to ' + fileBacklinks);
      } else {
        this.echo('DOM selector not found' + tempObj, 'ERROR');
        return errorMsg();
      }
    }
  };

  currentSubmission = 0;

  currentService = 0;

  currentIndexerStep = 0;

  console.log('numLoops: ' + numLoops);

  casper.start();

  casper.repeat(numLoops, function() {
    return this.then(function() {
      var objStep, serviceName;
      if (currentService >= service.length) {
        ++currentSubmission;
        currentService = 0;
        currentStep = 0;
      }
      if (currentSubmission < numPosts) {
        serviceName = service[currentService].name;
        objStep = service[currentService].steps[currentStep];
        this.doStep(objStep, serviceName);
        this.then(function() {
          this.capture('./capture/capture' + currentStep + '.png');
          ++currentStep;
          if (currentStep === service[currentService].steps.length) {
            serviceName = service[currentService].name;
            console.log(('Completed submit to ' + serviceName + '\n').green);
            ++currentService;
            return currentStep = 0;
          }
        });
        return;
      }
    });
  });

  casper.repeat(indexer.steps.length + 1, function() {
    return this.then(function() {
      var objStep, serviceName;
      if (currentIndexerStep === indexer.steps.length) {
        serviceName = indexerDetails.name;
        return console.log(('Submitted backlinks to ' + serviceName + '\n').green);
      } else {
        if (indexerDetails.status.toLowerCase() === 'ok') {
          serviceName = indexerDetails.name;
          objStep = indexer.steps[currentIndexerStep];
          this.doStep(objStep, serviceName);
          this.capture('./capture/indexer' + currentIndexerStep + '.png');
          return ++currentIndexerStep;
        }
      }
    });
  });

  casper.run(function() {
    console.log('Finished all submissions.'.green);
    this.echo('Press ctrl C to exit');
    this.exit(0);
    this.bypass(1);
  });

}).call(this);
