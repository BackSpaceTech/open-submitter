// Generated by CoffeeScript 1.3.3
(function() {
  var accounts, articles, backlinksList, casper, colors, currentIndexer, currentIndexerStep, currentService, currentStep, currentSubmission, errorMsg, fileAccounts, fileArticles, fileBacklinks, fs, i, imports, indexerDetails, indexers, indexersLogin, numIndexerLoops, numLoops, numPosts, page, randomAccount, service, services, skipService, spinner, submitArticle, system, _i, _j, _ref, _ref1;

  fs = require('fs');

  system = require('system');

  colors = require('colors');

  imports = require('./app/imports');

  spinner = require('./app/spinner');

  page = require('webpage').create();

  casper = require('casper').create({
    pageSettings: {
      webSecurityEnabled: false
    },
    viewportSize: {
      width: 800,
      height: 600
    },
    timeout: 3600000,
    stepTimeout: 300000,
    waitTimeout: 60000,
    verbose: true,
    onError: function(self, msg) {
      console.log(('FATAL:' + msg).red);
      self.exit();
    },
    onTimeout: function(self, msg) {
      this.capture('./capture/timeout.png');
      console.log(('general timeout error: ' + msg).red);
    },
    onStepTimeout: function(self, msg) {
      this.capture('./capture/timeout.png');
      console.log(('step timeout error: step ' + msg).red);
    },
    onWaitTimeout: function(self, msg) {
      this.capture('./capture/timeout.png');
      console.log(('wait timeout error: ' + msg).red);
    }
  });

  casper.userAgent('Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 ' + '(KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36');

  fileAccounts = './accounts/' + casper.cli.get(0) + '.csv';

  fileArticles = './articles/' + casper.cli.get(1) + '.txt';

  fileBacklinks = './backlinks/' + casper.cli.get(2) + '.txt';

  numPosts = casper.cli.get(3);

  console.log('\n');

  console.log('---------------- Submission Details ----------------------'.cyan);

  console.log(('Accounts file: ' + fileAccounts).cyan);

  console.log(('Articles file: ' + fileArticles).cyan);

  console.log(('Backlinks saved to file: ' + fileBacklinks).cyan);

  console.log(('Number of Submissions: ' + numPosts).cyan);

  currentService = 0;

  currentStep = 0;

  submitArticle = {
    title: '',
    body: '',
    keywords: ''
  };

  services = imports.services('./settings/services.txt');

  indexerDetails = imports.indexers('./settings/indexers.txt');

  numLoops = 0;

  service = [];

  currentService = 0;

  for (i = _i = 0, _ref = services.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (services[i].status.toLowerCase() === 'ok') {
      service[currentService] = require('./services/' + services[i].name);
      numLoops += service[currentService].steps.length;
      ++currentService;
    }
  }

  numLoops *= numPosts;

  numIndexerLoops = 0;

  indexers = [];

  indexersLogin = [];

  currentIndexer = 0;

  for (i = _j = 0, _ref1 = indexerDetails.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
    if (indexerDetails[i].status.toLowerCase() === 'ok') {
      indexers[currentIndexer] = require('./indexers/' + indexerDetails[i].name);
      indexersLogin[currentIndexer] = indexerDetails[i];
      numIndexerLoops += indexers[currentIndexer].steps.length;
      ++currentIndexer;
    }
  }

  console.log('------------------- Import Files -------------------------');

  accounts = imports.accounts(fileAccounts);

  articles = imports.articles(fileArticles);

  currentStep = 0;

  randomAccount = {
    username: '',
    password: '',
    site: ''
  };

  submitArticle = {
    title: '',
    body: '',
    keywords: ''
  };

  backlinksList = '';

  skipService = function() {
    console.log('Skipping ' + service[currentService].name);
    ++currentService;
    return currentStep = 0;
  };

  errorMsg = function() {
    console.log('Failed step ' + currentStep);
    console.log('Check error.png file');
    return skipService();
  };

  currentSubmission = 0;

  currentService = 0;

  currentIndexer = 0;

  currentIndexerStep = 0;

  casper.doStep = function(objStep, serviceName) {
    var str, submitURL, tempObj, tempURL;
    this.echo('Step: ' + currentStep);
    if (objStep.command === 'create') {
      this.echo('Creating article...');
      submitArticle = spinner.getArticle(articles, objStep.micro, objStep.noHTML);
      randomAccount = spinner.getAccount(accounts, serviceName);
      str = '-------------- Submit to ' + serviceName + ' ----------------';
      console.log(str.yellow);
    } else if (objStep.command === 'open') {
      this.echo('Opening url ' + objStep.url + '...');
      this.open(objStep.url).then(function() {
        this.capture('./capture/capture' + currentStep + '.png');
        if (objStep.confirm) {
          return this.waitForSelector(objStep.confirm, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          return this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      });
    } else if (objStep.command === 'open-site') {
      tempURL = objStep.begin + randomAccount.site + objStep.end;
      this.echo('Opening url ' + tempURL + '...');
      this.open(tempURL).then(function() {
        this.capture('./capture/capture' + currentStep + '.png');
        if (objStep.confirm) {
          return this.waitForSelector(objStep.confirm, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          return this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Opened url');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      });
    } else if (objStep.command === 'login') {
      if (randomAccount.username === 'no accounts') {
        this.echo('No ' + serviceName + ' accounts!');
        skipService();
      } else {
        this.echo('Logging in: ' + randomAccount.username + '...');
        tempObj = {
          formElem: objStep.form,
          nameElem: objStep.username,
          pwdElem: objStep.password,
          name: randomAccount.username,
          pwd: randomAccount.password,
          submit: objStep.submit
        };
        this.evaluate((function(s) {
          document.querySelector(s.nameElem).value = s.name;
          document.querySelector(s.pwdElem).value = s.pwd;
          if (s.submit) {
            document.querySelector(s.formElem).submit();
          }
        }), tempObj);
        this.capture('./capture/capture' + currentStep + '.png');
        this.echo('Waiting for login confirmation...');
        if (objStep.submit) {
          this.waitForSelector(objStep.confirm, function() {
            return this.echo('Login success.');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        } else if (objStep.confirmtxt) {
          this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Login success.');
          }, function() {
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      }
    } else if (objStep.command === 'login-indexer') {
      this.capture('./capture/indexer0.png');
      if (indexersLogin.length === 0) {
        this.echo('No indexer accounts set up!');
      } else {
        this.echo('Logging in: ' + indexersLogin[currentIndexer].username + '...');
        tempObj = {
          formElem: objStep.form,
          nameElem: objStep.username,
          pwdElem: objStep.password,
          name: indexersLogin[currentIndexer].username,
          pwd: indexersLogin[currentIndexer].password,
          submit: objStep.submit
        };
        this.evaluate((function(s) {
          document.querySelector(s.nameElem).value = s.name;
          document.querySelector(s.pwdElem).value = s.pwd;
          if (s.submit) {
            document.querySelector(s.formElem).submit();
          }
        }), tempObj);
        this.capture('./capture/indexer1.png');
        this.echo('Waiting for login confirmation...');
        if (objStep.confirm) {
          this.waitForSelector(objStep.confirm, function() {
            return this.echo('Login success.');
          }, function() {
            this.capture('./capture/error.png');
            return errorMsg();
          });
        } else if (objStep.confirmtxt) {
          this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Login success.');
          }, function() {
            this.capture('./capture/error.png');
            return errorMsg();
          });
        }
      }
    }
    if (objStep.command === 'click') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.click(tempObj);
        this.echo('Clicked on DOM selector');
        if (objStep.confirm) {
          this.waitForSelector(objStep.confirm, function() {
            return this.echo('Confirmed.');
          }, function() {
            this.echo('Confirm DOM selector not found', 'ERROR');
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
        if (objStep.confirmtxt) {
          this.waitForText(objStep.confirmtxt, function() {
            return this.echo('Confirmed: ' + objStep.confirmtxt);
          }, function() {
            this.echo('Confirm text not found', 'ERROR');
            errorMsg();
            return this.capture('./capture/error.png');
          });
        }
      } else {
        this.echo('DOM selector not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'wait') {
      this.echo('Waiting for ' + objStep.value + ' ms');
      this.wait(objStep.value, function() {
        this.echo('Finished wait time.');
      });
    }
    if (objStep.command === 'title') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.sendKeys(tempObj, submitArticle.title);
        this.echo('Entered title');
      } else {
        this.echo('Input field not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'backlinks') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.sendKeys(tempObj, backlinksList);
        this.echo('Entered backlinks list');
      } else {
        this.echo('Input field not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'body') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        this.sendKeys(tempObj, submitArticle.body);
        this.echo('Entered body');
      } else {
        this.echo('Input field not found', 'ERROR');
        errorMsg();
      }
    }
    if (objStep.command === 'save-href') {
      if (objStep.selector) {
        tempObj = objStep.selector;
      } else if (objStep.xpath) {
        tempObj = {
          type: 'xpath',
          path: objStep.xpath
        };
      }
      if (this.exists(tempObj)) {
        submitURL = this.getElementAttribute(tempObj, 'href');
        backlinksList += submitURL + '\n';
        console.log(('Submitted post to URL: ' + submitURL).cyan);
        try {
          fs.write(fileBacklinks, submitURL, 'a');
          fs.write(fileBacklinks, '\n', 'a');
        } catch (e) {
          this.echo(e);
        }
        return this.echo('Saved backlink to ' + fileBacklinks);
      } else {
        this.echo('DOM selector not found' + tempObj, 'ERROR');
        return errorMsg();
      }
    }
  };

  casper.start();

  casper.repeat(numLoops, function() {
    return this.then(function() {
      var objStep, serviceName;
      if (currentService >= service.length) {
        ++currentSubmission;
        currentService = 0;
        currentStep = 0;
      }
      if (currentSubmission < numPosts) {
        serviceName = service[currentService].name;
        objStep = service[currentService].steps[currentStep];
        this.doStep(objStep, serviceName);
        this.then(function() {
          this.capture('./capture/capture' + currentStep + '.png');
          ++currentStep;
          if (currentStep === service[currentService].steps.length) {
            serviceName = service[currentService].name;
            console.log(('Completed submit to ' + serviceName + '\n').green);
            ++currentService;
            return currentStep = 0;
          }
        });
        return;
      }
    });
  });

  casper.repeat(numIndexerLoops, function() {
    return this.then(function() {
      var objStep, serviceName;
      if (currentIndexer < indexers.length) {
        serviceName = indexers[currentIndexer].name;
        objStep = indexers[currentIndexer].steps[currentIndexerStep];
        this.doStep(objStep, serviceName);
        ++currentIndexerStep;
        if (currentIndexerStep === indexers[currentIndexer].steps.length) {
          ++currentIndexer;
          return currentIndexerStep = 0;
        }
      }
    });
  });

  casper.run(function() {
    console.log('Finished all submissions.'.green);
    this.echo('Press ctrl C to exit');
    this.exit(0);
    this.bypass(1);
  });

}).call(this);
